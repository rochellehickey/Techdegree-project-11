{"version":3,"sources":["components/SearchForm.js","components/Navigation.js","config.js","components/Photo.js","components/NotFound.js","components/PhotoContainer.js","components/Container.js","components/fourZeroFour.js","App.js","serviceWorker.js","index.js"],"names":["SearchForm","state","query","onSearchChange","e","_this","setState","target","value","handleSubmit","preventDefault","props","onSearch","currentTarget","reset","_this2","this","react_default","a","createElement","className","onSubmit","id","type","name","placeholder","onChange","ref","input","autoComplete","fill","height","viewBox","width","xmlns","d","Component","Navigation","handleRoute","history","push","concat","components_SearchForm","react_router_dom","to","withRouter","apiKey","Photo","src","url","alt","NotFound","PhotoContainer","photos","results","data","length","map","photo","components_Photo","key","farm","server","secret","queryFromParent","components_NotFound","Container","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","searchForPhotos","arguments","undefined","axios","get","then","response","loading","catch","error","console","log","match","params","listen","location","pathname","slice","components_PhotoContainer","fourZeroFour","App","components_Navigation","react_router","exact","path","render","component","Boolean","window","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.02c8a2f0.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass SearchForm extends Component {\n\n  state = {\n    query: ''\n  }\n\n  /* Watch for changes in the search field */\n  onSearchChange = e => {\n    this.setState({ query: e.target.value });\n  }\n\n  /* Handling the user typing into the search field */\n  handleSubmit = e => {\n    e.preventDefault();\n    /* If the search equals nothing, return nothing */\n    if (this.query.value === '') {\n      return;\n    } else {\n      /* If search equals 'something', set query to 'something' */\n      this.props.onSearch(this.state.query);\n      e.currentTarget.reset();\n    }\n  }\n\n\n  render() {\n    /* onSubmit call the handleSubmit function */\n    /* onChange calls the onSearchChange function */\n    return(\n      <form className=\"search-form\" onSubmit={this.handleSubmit}>\n        <input id=\"search\"\n          type=\"search\"\n          name=\"search\"\n          placeholder=\"Search\"\n          onChange={this.onSearchChange}\n          ref={input => this.query = input}\n          autoComplete='off' />\n        <button type=\"submit\" className=\"search-button\">\n          <svg fill=\"#fff\" height=\"24\" viewBox=\"0 0 23 23\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\n            <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n          </svg>\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default SearchForm;","import React, { Component } from 'react';\nimport { NavLink, withRouter } from 'react-router-dom';\nimport SearchForm from './SearchForm';\n\nclass Navigation extends Component {\n\n  /* Push search term to the URL bar */\n  handleRoute = (query) => {\n    this.props.history.push(`/search/${query}`);\n  }\n\n  render() {\n    /* onSearch call handleRoute function */\n    return(\n      <nav className=\"main-nav\">\n        <SearchForm onSearch={this.handleRoute} />\n        <ul>\n          <li><NavLink to=\"/search/bears\">Bears</NavLink></li>\n          <li><NavLink to=\"/search/beets\">Beets</NavLink></li>\n          <li><NavLink to=\"/search/battlestar-galactica\">Battlestar Galactica</NavLink></li>\n        </ul>\n      </nav>\n    )\n  }\n}\n\nexport default withRouter(Navigation);","const apiKey = 'dc767a996ed23683711945a2dfe2cfb0';\nexport default apiKey;","import React from 'react';\n\n/* IMG takes URL prop constructed from PhotoContainer.js */\nconst Photo = props => (\n  <li className=\"thumbnails\">\n    <img src={props.url} alt=\"\" />\n  </li>\n);\n\nexport default Photo;","import React from 'react';\n\nconst NotFound = props => (\n  <li className=\"not-found\">\n    <h2>No results found</h2>\n    <p>That search did not return any results, please try again.</p>\n  </li>\n);\n\nexport default NotFound;","import React from 'react';\nimport Photo from './Photo';\nimport NotFound from './NotFound';\n\nconst PhotoContainer = props => {\n\n  const results = props.data;\n  let photos;\n\n  /* If API returns any results, return Results title and accompanying photos */\n  if (results.length) {\n    /* Creating photos array by constructing the URLs from API results */\n    photos = results.map(photo => <Photo key={photo.id} url={`https://farm${photo.farm}.staticflickr.com/${photo.server}/${photo.id}_${photo.secret}.jpg`} />);\n    return(\n      <div id=\"photo-container\">\n        <h2>Results for {props.queryFromParent}</h2>\n        {photos}\n      </div>\n    );\n  } else {\n    /* If no results are return/match, display NotFound.js */\n    return(\n      <div id=\"photo-container\">\n        <NotFound />\n      </div>\n    );\n  }\n\n}\n\nexport default PhotoContainer;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport apiKey from '../config';\nimport PhotoContainer from './PhotoContainer';\n\nclass Container extends Component {\n\n  /* Set states for when photos are returned and when page is reloading */\n  constructor() {\n    super();\n    this.state = {\n      photos: [],\n      loading: true\n    };\n  }\n\n  /* When the component mounts search for photos */\n  componentDidMount() {\n    this.searchForPhotos(this.props.match.params.query);\n    this.props.history.listen(location => this.searchForPhotos(location.pathname.slice(8)));\n  }\n\n  /* Send the search query to the Flickr API and get results */\n  searchForPhotos = (query = \"bears\") => {\n    axios.get(`https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&text=${query}&per_page=12&sort=relevance&format=json&nojsoncallback=1`)\n\n    /* When results are received loading stops */\n    .then(response => {\n      this.setState({\n        photos: response.data.photos.photo,\n        loading: false\n      });\n    })\n    /* Any errors get logged to the console */\n    .catch(error => {\n      console.log(\"ERROR\", error);\n    });\n  };\n\n\n  render() {\n    /* When loading render 'Loading...' to the page or render results */\n    return(\n      <ul>\n        {this.state.loading ? (<h2>Loading ...</h2>) : (<PhotoContainer data={this.state.photos} queryFromParent={this.props.match.params.query} />)}\n      </ul>\n    );\n  }\n}\n\nexport default Container;","import React from 'react';\n\nconst fourZeroFour = props => (\n  <div className=\"not-found\">\n    <h2>404 Error</h2>\n    <p>Something has run amuck amuck amuck.</p>\n  </div>\n);\n\nexport default fourZeroFour;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Redirect, Route } from 'react-router-dom';\nimport Navigation from './components/Navigation';\nimport Container from './components/Container';\nimport fourZeroFour from './components/fourZeroFour';\n\nclass App extends Component {\n\n  render() {\n    return(\n      <Router>\n        <div className=\"container\">\n          <Navigation />\n          <Switch>\n            <Route exact path=\"/\" render={() => <Redirect to=\"/search/bears\" />} />\n            <Route exact path=\"/search/:query\" component={Container} />\n            <Route path=\"*\" component={fourZeroFour} />\n          </Switch>\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}