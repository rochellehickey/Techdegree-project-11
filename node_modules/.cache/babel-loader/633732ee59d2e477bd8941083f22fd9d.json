{"ast":null,"code":"var _jsxFileName = \"/Users/rochellehickey/Documents/Techdegree/Techdegree-project-11/src/App.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react';\nimport Container from './components/Container';\n/* Flickr API */\n\nconst API = 'https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=dc767a996ed23683711945a2dfe2cfb0&text=cats&format=json';\nconst DEFAULT_QUERY = 'redux';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    /* When the API fetched, it will be stored in the local state with React’s this.setState() method */\n\n    this.state = {\n      hits: [],\n      isLoading: false,\n      error: null\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      isLoading: true\n    });\n    fetch(API + DEFAULT_QUERY).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Oops, something went awry ...');\n      }\n    }).then(data => this.setState({\n      hits: data.hits,\n      isLoading: false\n    })); // .catch(error => this.setState({ error, isLoading: false }));\n  }\n\n  render() {\n    /* When the render() method triggers again it can display the fetched API data, display loading message, or display an error message. */\n    const _this$state = this.state,\n          hits = _this$state.hits,\n          isLoading = _this$state.isLoading,\n          error = _this$state.error;\n\n    if (error) {\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, error.message);\n    }\n\n    if (isLoading) {\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"Loading ...\");\n    }\n\n    return [React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }),\n    /* Displaying fetched API data */\n    React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, hits.map(hit => React.createElement(\"li\", {\n      key: hit.objectID,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: hit.url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, hit.title))))];\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/rochellehickey/Documents/Techdegree/Techdegree-project-11/src/App.js"],"names":["React","Component","ReactDOM","Container","API","DEFAULT_QUERY","App","constructor","props","state","hits","isLoading","error","componentDidMount","setState","fetch","then","response","ok","json","Error","data","render","message","map","hit","objectID","url","title"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,OAArB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AAIA;;AACA,MAAMC,GAAG,GAAG,kIAAZ;AACA,MAAMC,aAAa,GAAG,OAAtB;;AAEA,MAAMC,GAAN,SAAkBL,SAAlB,CAA4B;AAE1BM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA;;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,EADK;AAEXC,MAAAA,SAAS,EAAE,KAFA;AAGXC,MAAAA,KAAK,EAAE;AAHI,KAAb;AAKD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,QAAL,CAAc;AAAEH,MAAAA,SAAS,EAAE;AAAb,KAAd;AAEAI,IAAAA,KAAK,CAACX,GAAG,GAAGC,aAAP,CAAL,CACGW,IADH,CACQC,QAAQ,IAAI;AAChB,UAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,eAAOD,QAAQ,CAACE,IAAT,EAAP;AACD,OAFD,MAEO;AACL,cAAM,IAAIC,KAAJ,CAAU,+BAAV,CAAN;AACD;AACF,KAPH,EAQGJ,IARH,CAQQK,IAAI,IAAI,KAAKP,QAAL,CAAc;AAAEJ,MAAAA,IAAI,EAAEW,IAAI,CAACX,IAAb;AAAmBC,MAAAA,SAAS,EAAE;AAA9B,KAAd,CARhB,EAHkB,CAYhB;AACH;;AAEDW,EAAAA,MAAM,GAAG;AACP;AADO,wBAE4B,KAAKb,KAFjC;AAAA,UAECC,IAFD,eAECA,IAFD;AAAA,UAEOC,SAFP,eAEOA,SAFP;AAAA,UAEkBC,KAFlB,eAEkBA,KAFlB;;AAIP,QAAIA,KAAJ,EAAW;AACT,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIA,KAAK,CAACW,OAAV,CAAP;AACD;;AAED,QAAIZ,SAAJ,EAAe;AACb,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAP;AACD;;AAED,WAAM,CACJ,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADI;AAGJ;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,IAAI,CAACc,GAAL,CAASC,GAAG,IACX;AAAI,MAAA,GAAG,EAAEA,GAAG,CAACC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAG,MAAA,IAAI,EAAED,GAAG,CAACE,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmBF,GAAG,CAACG,KAAvB,CADF,CADD,CADH,CAJI,CAAN;AAYD;;AApDyB;;AAuD5B,eAAetB,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react';\nimport Container from './components/Container';\n\n\n\n/* Flickr API */\nconst API = 'https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=dc767a996ed23683711945a2dfe2cfb0&text=cats&format=json';\nconst DEFAULT_QUERY = 'redux';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    /* When the API fetched, it will be stored in the local state with React’s this.setState() method */\n    this.state = {\n      hits: [],\n      isLoading: false,\n      error: null,\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ isLoading: true });\n\n    fetch(API + DEFAULT_QUERY)\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Oops, something went awry ...');\n        }\n      })\n      .then(data => this.setState({ hits: data.hits, isLoading: false }));\n      // .catch(error => this.setState({ error, isLoading: false }));\n  }\n\n  render() {\n    /* When the render() method triggers again it can display the fetched API data, display loading message, or display an error message. */\n    const { hits, isLoading, error } = this.state;\n\n    if (error) {\n      return <p>{error.message}</p>;\n    }\n\n    if (isLoading) {\n      return <p>Loading ...</p>;\n    }\n\n    return[\n      <Container />,\n\n      /* Displaying fetched API data */\n      <ul>\n        {hits.map(hit =>\n          <li key={hit.objectID}>\n            <a href={hit.url}>{hit.title}</a>\n          </li>,\n        )}\n      </ul>\n    ]\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}