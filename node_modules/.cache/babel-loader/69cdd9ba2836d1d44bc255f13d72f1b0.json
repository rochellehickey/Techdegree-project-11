{"ast":null,"code":"var _jsxFileName = \"/Users/rochellehickey/Documents/Techdegree/Techdegree-project-11/src/App.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react';\nimport Container from './components/Container';\n/* Flickr API */\n\nconst API = 'https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=dc767a996ed23683711945a2dfe2cfb0&text=cats&format=json';\nconst DEFAULT_QUERY = 'redux';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    /* When the API fetched, it will be stored in the local state with React’s this.setState() method */\n\n    this.state = {\n      hits: [],\n      isLoading: false\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      isLoading: true\n    });\n    fetch(API + DEFAULT_QUERY).then(response => response.json()).then(data => this.setState({\n      hits: data.hits,\n      isLoading: false\n    }));\n  }\n\n  render() {\n    /* When the render() method triggers again it can display the fetched API data. */\n    const hits = this.state.hits;\n    return [React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }),\n    /* Displaying fetched API data */\n    React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, hits.map(hit => React.createElement(\"li\", {\n      key: hit.objectID,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: hit.url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, hit.title))))];\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/rochellehickey/Documents/Techdegree/Techdegree-project-11/src/App.js"],"names":["React","Component","ReactDOM","Container","API","DEFAULT_QUERY","App","constructor","props","state","hits","isLoading","componentDidMount","setState","fetch","then","response","json","data","render","map","hit","objectID","url","title"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,OAArB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AAEA;;AACA,MAAMC,GAAG,GAAG,kIAAZ;AACA,MAAMC,aAAa,GAAG,OAAtB;;AAEA,MAAMC,GAAN,SAAkBL,SAAlB,CAA4B;AAE1BM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA;;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,EADK;AAEXC,MAAAA,SAAS,EAAE;AAFA,KAAb;AAID;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,QAAL,CAAc;AAAEF,MAAAA,SAAS,EAAE;AAAb,KAAd;AAEAG,IAAAA,KAAK,CAACV,GAAG,GAAGC,aAAP,CAAL,CACGU,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAEQG,IAAI,IAAI,KAAKL,QAAL,CAAc;AAAEH,MAAAA,IAAI,EAAEQ,IAAI,CAACR,IAAb;AAAmBC,MAAAA,SAAS,EAAE;AAA9B,KAAd,CAFhB;AAGD;;AAEDQ,EAAAA,MAAM,GAAG;AACP;AADO,UAECT,IAFD,GAEU,KAAKD,KAFf,CAECC,IAFD;AAIP,WAAM,CACJ,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADI;AAGJ;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,IAAI,CAACU,GAAL,CAASC,GAAG,IACX;AAAI,MAAA,GAAG,EAAEA,GAAG,CAACC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAG,MAAA,IAAI,EAAED,GAAG,CAACE,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmBF,GAAG,CAACG,KAAvB,CADF,CADD,CADH,CAJI,CAAN;AAYD;;AApCyB;;AAuC5B,eAAelB,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react';\nimport Container from './components/Container';\n\n/* Flickr API */\nconst API = 'https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=dc767a996ed23683711945a2dfe2cfb0&text=cats&format=json';\nconst DEFAULT_QUERY = 'redux';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    /* When the API fetched, it will be stored in the local state with React’s this.setState() method */\n    this.state = {\n      hits: [],\n      isLoading: false,\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ isLoading: true });\n\n    fetch(API + DEFAULT_QUERY)\n      .then(response => response.json())\n      .then(data => this.setState({ hits: data.hits, isLoading: false }));\n  }\n\n  render() {\n    /* When the render() method triggers again it can display the fetched API data. */\n    const { hits } = this.state;\n\n    return[\n      <Container />,\n\n      /* Displaying fetched API data */\n      <ul>\n        {hits.map(hit =>\n          <li key={hit.objectID}>\n            <a href={hit.url}>{hit.title}</a>\n          </li>,\n        )}\n      </ul>\n    ]\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}