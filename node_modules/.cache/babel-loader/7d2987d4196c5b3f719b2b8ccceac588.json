{"ast":null,"code":"import React, { Component } from 'react';\nimport ReactDOM from 'react';\nimport Container from './components/Container'; // /* Flickr API */\n// const API = 'https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=dc767a996ed23683711945a2dfe2cfb0&text=cats&format=json';\n// const DEFAULT_QUERY = 'redux';\n// class App extends Component {\n//   constructor(props) {\n//     super(props);\n//     /* When the API fetched, it will be stored in the local state with React’s this.setState() method */\n//     this.state = {\n//       hits: [],\n//       isLoading: false,\n//       error: null,\n//     };\n//   }\n//   componentDidMount() {\n//     this.setState({ isLoading: true });\n//     fetch(API + DEFAULT_QUERY)\n//       .then(response => {\n//         if (response.ok) {\n//           return response.json();\n//         } else {\n//           throw new Error('Oops, something went awry ...');\n//         }\n//       })\n//       .then(data => this.setState({ hits: data.hits, isLoading: false }));\n//       .catch(error => this.setState({ error, isLoading: false }));\n//   }\n//   render() {\n//     /* When the render() method triggers again it can display the fetched API data, display loading message, or display an error message. */\n//     const { hits, isLoading, error } = this.state;\n//     if (error) {\n//       return <p>{error.message}</p>;\n//     }\n//     if (isLoading) {\n//       return <p>Loading ...</p>;\n//     }\n//     return[\n//       <Container />,\n//       /* Displaying fetched API data */\n//       <ul>\n//         {hits.map(hit =>\n//           <li key={hit.objectID}>\n//             <a href={hit.url}>{hit.title}</a>\n//           </li>,\n//         )}\n//       </ul>\n//     ]\n//   }\n// }\n\nexport default App;","map":{"version":3,"sources":["/Users/rochellehickey/Documents/Techdegree/Techdegree-project-11/src/App.js"],"names":["React","Component","ReactDOM","Container","App"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,OAArB;AACA,OAAOC,SAAP,MAAsB,wBAAtB,C,CAIA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeC,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react';\nimport Container from './components/Container';\n\n\n\n// /* Flickr API */\n// const API = 'https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=dc767a996ed23683711945a2dfe2cfb0&text=cats&format=json';\n// const DEFAULT_QUERY = 'redux';\n\n// class App extends Component {\n\n//   constructor(props) {\n//     super(props);\n\n//     /* When the API fetched, it will be stored in the local state with React’s this.setState() method */\n//     this.state = {\n//       hits: [],\n//       isLoading: false,\n//       error: null,\n//     };\n//   }\n\n//   componentDidMount() {\n//     this.setState({ isLoading: true });\n\n//     fetch(API + DEFAULT_QUERY)\n//       .then(response => {\n//         if (response.ok) {\n//           return response.json();\n//         } else {\n//           throw new Error('Oops, something went awry ...');\n//         }\n//       })\n//       .then(data => this.setState({ hits: data.hits, isLoading: false }));\n//       .catch(error => this.setState({ error, isLoading: false }));\n//   }\n\n//   render() {\n//     /* When the render() method triggers again it can display the fetched API data, display loading message, or display an error message. */\n//     const { hits, isLoading, error } = this.state;\n\n//     if (error) {\n//       return <p>{error.message}</p>;\n//     }\n\n//     if (isLoading) {\n//       return <p>Loading ...</p>;\n//     }\n\n//     return[\n//       <Container />,\n\n//       /* Displaying fetched API data */\n//       <ul>\n//         {hits.map(hit =>\n//           <li key={hit.objectID}>\n//             <a href={hit.url}>{hit.title}</a>\n//           </li>,\n//         )}\n//       </ul>\n//     ]\n//   }\n// }\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}